{"version":3,"file":"static/chunks/3046.92d36b2b3592a113.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/RepoFilterButton.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/jobs/JobsPageContent.tsx","webpack://_N_E/../ui-core/src/jobs/JobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewExpansionKey.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/ui/findDuplicateRepoNames.tsx","webpack://_N_E/../ui-core/src/ui/useRepoExpansionState.tsx","webpack://_N_E/../ui-core/src/instance/JobMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedJobRow.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {Box, Button, Dialog, DialogFooter, DialogHeader, Icon} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton = () => {\n  const {allRepos, visibleRepos, toggleVisible} = useContext(WorkspaceContext);\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        outlined\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  NonIdealState,\n  Spinner,\n  SpinnerWithText,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/JobsPageContent.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {OverviewJobsTable} from '../overview/OverviewJobsTable';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const JobsPageContent = () => {\n  const {allRepos, visibleRepos, loading: workspaceLoading} = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between', grow: 0}}\n      >\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          {repoCount > 1 ? <RepoFilterButton /> : null}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <SpinnerWithText label=\"Loading jobs…\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\n\nimport {JobsPageContent} from './JobsPageContent';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const JobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Jobs');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Jobs</Heading>} />\n      <JobsPageContent />\n    </Box>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default JobsRoot;\n","export const OVERVIEW_COLLAPSED_KEY = 'overview-collapsed-state';\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {useEffect, useState} from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setReady(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return ready;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","export const findDuplicateRepoNames = (repoNames: string[]) => {\n  const uniques = new Set<string>();\n  const duplicates = new Set<string>();\n  repoNames.forEach((repoName) => {\n    if (uniques.has(repoName)) {\n      duplicates.add(repoName);\n    } else {\n      uniques.add(repoName);\n    }\n  });\n  return duplicates;\n};\n","import {useCallback, useContext, useMemo} from 'react';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\nexport const buildStorageKey = (basePath: string, key: string) => `${basePath}:dagster.${key}`;\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of repository containers,\n * e.g. for the left nav or run timeline.\n */\nexport const useRepoExpansionState = (collapsedKey: string, allKeys: string[]) => {\n  const {basePath} = useContext(AppContext);\n\n  const collapsedStorageKey = buildStorageKey(basePath, collapsedKey);\n  const [collapsedKeys, setCollapsedKeys] = useStateWithStorage<string[]>(\n    collapsedStorageKey,\n    validateExpandedKeys,\n  );\n\n  const onToggle = useCallback(\n    (_key: string | RepoAddress) => {\n      const key = typeof _key === 'object' ? repoAddressAsHumanString(_key) : _key;\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        if (nextCollapsedKeys.has(key)) {\n          nextCollapsedKeys.delete(key);\n        } else {\n          nextCollapsedKeys.add(key);\n        }\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [setCollapsedKeys],\n  );\n\n  const onToggleAll = useCallback(\n    (expand: boolean) => {\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        allKeys.forEach((key) => {\n          expand ? nextCollapsedKeys.delete(key) : nextCollapsedKeys.add(key);\n        });\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [allKeys, setCollapsedKeys],\n  );\n\n  const expandedKeys = useMemo(() => {\n    const collapsedSet = new Set(collapsedKeys);\n    return allKeys.filter((key) => !collapsedSet.has(key));\n  }, [allKeys, collapsedKeys]);\n\n  return useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n      onToggleAll,\n    }),\n    [expandedKeys, onToggle, onToggleAll],\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {useCallback} from 'react';\n\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {useMaterializationAction} from '../assets/LaunchAssetExecutionButton';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReexecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n  isAssetJob: boolean | 'loading';\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, isAssetJob, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const pipelineSelector = {\n    pipelineName: job.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const materialize = useMaterializationAction(job.name);\n  const onReexecute = useJobReexecution();\n\n  const {\n    permissions: {canLaunchPipelineReexecution, canLaunchPipelineExecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, {data}] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const fetchIfPossible = useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const executeItem =\n    isAssetJob === 'loading' ? (\n      <MenuItem icon=\"execute\" text=\"Loading...\" disabled={true} />\n    ) : isAssetJob === true ? (\n      <MenuItem\n        icon={materialize.loading ? <Spinner purpose=\"caption-text\" /> : 'execute'}\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        onClick={(e) => materialize.onClick(pipelineSelector, e)}\n      />\n    ) : (\n      <MenuLink\n        icon=\"execute\"\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        to={workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName: job.name,\n          isJob: job.isJob,\n          path: '/playground',\n        })}\n      />\n    );\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.ALL_STEPS) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.FROM_FAILURE) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <>\n      {materialize.launchpadElement}\n      <Popover\n        onOpened={() => fetchIfPossible()}\n        content={\n          <Menu>\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n              })}\n              icon=\"job\"\n              text=\"View job\"\n            />\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n                path: '/runs',\n              })}\n              icon=\"checklist\"\n              text=\"View all recent runs\"\n            />\n            {canLaunchPipelineExecution ? (\n              executeItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineExecution} display=\"block\">\n                {executeItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteAllItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteAllItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteFromFailureItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteFromFailureItem}\n              </Tooltip>\n            )}\n          </Menu>\n        }\n        position=\"bottom-left\"\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n    </>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        pipelineName\n        executionPlan {\n          artifactsPersisted\n          ...ExecutionPlanToGraphFragment\n        }\n      }\n    }\n  }\n  ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Colors, MiddleTruncate} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CaptionText, LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/VirtualizedJobRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n  const pipeline =\n    data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n  const {schedules, sensors} = useMemo(() => {\n    if (pipeline) {\n      const {schedules, sensors} = pipeline;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [pipeline]);\n\n  const latestRuns = useMemo(() => {\n    if (pipeline) {\n      const {runs} = pipeline;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [pipeline]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>{pipeline?.description || ''}</CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns[0] ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu\n              job={{name, isJob, runs: latestRuns}}\n              isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n              repoAddress={repoAddress}\n            />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.textLight(),\n      }}\n    >\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp4-popover2-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n"],"names":["RepoFilterButton","useContext","WorkspaceContext","allRepos","visibleRepos","toggleVisible","useState","open","setOpen","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Fragment","Dialog","canOutsideClickClose","canEscapeKeyClose","isOpen","style","width","onClose","jsx","DialogHeader","icon","label","RepoSelector","options","onBrowse","onToggle","selected","DialogFooter","Box","padding","top","Button","intent","onClick","outlined","Icon","name","rightIcon","length","concat","OverviewJobsTable","param","repos","parentRef","useRef","allKeys","useMemo","map","repoAddress","repoAddressAsHumanString","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","flat","forEach","jobs","push","type","jobCount","repoKey","includes","isJob","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","ii","row","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","VirtualizedJobHeader","div","overflow","Container","ref","Inner","$totalHeight","index","key","size","start","RepoRow","height","expanded","showLocation","has","rightElement","Tooltip","content","placement","Tag","VirtualizedJobRow","JobsPageContent","loading","useQueryPersistedState","queryKey","defaults","search","searchValue","setSearchValue","repoCount","queryResultOverview","useQuery","OVERVIEW_JOBS_QUERY","fetchPolicy","notifyOnNetworkStatusChange","data","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","repoBuckets","visibleKeys","visibleRepoKeys","buildBuckets","filter","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","showSearchSpinner","workspaceLoading","horizontal","vertical","flex","direction","alignItems","justifyContent","grow","gap","TextInput","value","SearchInputSpinner","tooltipContent","undefined","onChange","e","target","placeholder","QueryRefreshCountdown","SpinnerWithText","paddingTop","Spinner","purpose","color","Colors","anyReposHidden","NonIdealState","title","description","strong","workspaceOrError","__typename","entries","locationEntries","entry","locationOrLoadError","buckets","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","repositories","Symbol","iterator","repo","pipelines","buildRepoAddress","isHiddenAssetGroupJob","pipeline","err","return","sortRepoBuckets","gql","PYTHON_ERROR_FRAGMENT","JobsRoot","useTrackPageView","useDocumentTitle","PageHeader","Heading","__webpack_exports__","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_1__","_","sort","a","b","aString","bString","localeCompare","Set","option","repository","repositoryLocation","useDelayedState","delayMsec","ready","setReady","useEffect","timer","setTimeout","clearTimeout","props","margin","canShow","repoNames","uniques","duplicates","repoName","add","validateExpandedKeys","parsed","Array","isArray","collapsedKey","basePath","collapsedStorageKey","AppContext","useStateWithStorage","collapsedKeys","setCollapsedKeys","useCallback","_key","nextCollapsedKeys","delete","from","expand","collapsedSet","JobMenu","job","isAssetJob","lastRun","runs","pipelineSelector","pipelineName","repositoryName","repositoryLocationName","location","materialize","useMaterializationAction","onReexecute","useJobReexecution","usePermissionsForLocation","_usePermissionsForLocation_permissions","permissions","canLaunchPipelineReexecution","canLaunchPipelineExecution","disabledReasons","useLazyQuery","RUN_RE_EXECUTION_QUERY","fetchHasExecutionPlan","fetchIfPossible","id","variables","runId","run","pipelineRunOrError","executeItem","MenuItem","text","disabled","MenuLink","to","workspacePipelinePath","repoLocation","path","reExecuteAllItem","ReexecutionStrategy","ALL_STEPS","canRunAllSteps","reExecuteFromFailureItem","FROM_FAILURE","canRunFromFailure","launchpadElement","Popover","onOpened","Menu","display","position","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","TEMPLATE_COLUMNS","SINGLE_JOB_QUERY","selector","buildPipelineSelector","queryJob","queryResult","useDelayedRowQuery","pipelineOrError","schedules","sensors","latestRuns","_to_consumable_array","Row","$height","$start","RowGrid","border","RowCell","maxWidth","whiteSpace","fontWeight","Link","workspacePathFromAddress","MiddleTruncate","CaptionText","ScheduleSensorTagContainer","ScheduleOrSensorTag","LoadingOrNone","LastRunSummary","showButton","showHover","showSummary","RunStatusPezList","jobName","reverse","fade","marginTop","gridTemplateColumns","fontSize","HeaderCell","styled","withConfig","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT"],"sourceRoot":""}