{"version":3,"file":"static/chunks/5502.87442b77344d85a8.js","mappings":"skDAwBA,IAAMA,EAAmB,oCAEZC,iBAAmB,SAAAC,CAAA,MAC9BC,EAAAA,EAAAA,eAAAA,CACAC,EAAAA,EAAAA,MAAAA,CACAC,EAAAA,EAAAA,QAAAA,CACAC,EAAAA,EAAAA,QAAAA,CAOMC,EAAYC,CAAAA,EAAAA,EAAAA,MAAAA,EAA8B,MAE1CC,EAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACpCC,MAAOR,EAAgBS,MAAM,CAC7BC,iBAAkB,kBAAMN,EAAUO,OAAO,EACzCC,aAAc,kBAAM,IACpBC,SAAU,EACZ,GAEMC,EAAcR,EAAeS,YAAY,GACzCC,EAAQV,EAAeW,eAAe,GAE5C,MACE,GAAAC,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACE,GAAAF,EAAAG,GAAA,EAACC,kBAAAA,CAAAA,GACD,GAAAJ,EAAAG,GAAA,EAACE,MAAAA,CAAIC,MAAO,CAACC,SAAU,QAAQ,WAC7B,GAAAP,EAAAG,GAAA,EAACK,EAAAA,EAASA,CAAAA,CAACC,IAAKvB,WACd,GAAAc,EAAAG,GAAA,EAACO,EAAAA,EAAKA,CAAAA,CAACC,aAAcf,WAClBE,EAAMc,GAAG,CAAC,SAAA/B,CAAA,MAAEgC,EAAAA,EAAAA,KAAAA,CAAOC,EAAAA,EAAAA,GAAAA,CAAKC,EAAAA,EAAAA,IAAAA,CAAMC,EAAAA,EAAAA,KAAAA,CACvBC,EAAiBnC,CAAe,CAAC+B,EAAM,CAC7C,MACE,GAAAb,EAAAG,GAAA,EAACe,eAAAA,CAECD,eAAgBA,EAChBlC,OAAQA,EACRC,SAAUA,EACVC,SAAUA,EACVkC,OAAQJ,EACRC,MAAOA,GANFF,EASX,WAMZ,EAEMV,kBAAoB,WACxB,MACE,GAAAJ,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CACFC,OAAO,iBACPf,MAAO,CACLgB,QAAS,OACTC,oBAAqB5C,EACrBwC,OAAQ,OACRK,SAAU,OACVC,MAAOC,EAAAA,CAAgB,EACzB,YAEA,GAAA1B,EAAAG,GAAA,EAACwB,EAAAA,EAAUA,CAAAA,UAAC,oBACZ,GAAA3B,EAAAG,GAAA,EAACwB,EAAAA,EAAUA,CAAAA,UAAC,gBACZ,GAAA3B,EAAAG,GAAA,EAACwB,EAAAA,EAAUA,CAAAA,UAAC,mBACZ,GAAA3B,EAAAG,GAAA,EAACwB,EAAAA,EAAUA,CAAAA,UAAC,kBACZ,GAAA3B,EAAAG,GAAA,EAACwB,EAAAA,EAAUA,CAAAA,UAAC,cACZ,GAAA3B,EAAAG,GAAA,EAACwB,EAAAA,EAAUA,CAAAA,CAAAA,KAGjB,EACMT,eAAiB,SAAArC,CAAA,MACrBoC,EAAAA,EAAAA,cAAAA,CACAlC,EAAAA,EAAAA,MAAAA,CACAC,EAAAA,EAAAA,QAAAA,CACAC,EAAAA,EAAAA,QAAAA,CACAkC,EAAAA,EAAAA,MAAAA,CACAH,EAAAA,EAAAA,KAAAA,CASgCY,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAG9BC,EAA8B,CAC9BC,UAAW,CAACb,eAAAA,CAAc,CAC5B,MALOc,EAAyBH,CAAAA,CAAAA,EAAAA,CAAfI,EAAeJ,CAAAA,CAAAA,EAAAA,CAOhCK,CAAAA,EAAAA,EAAAA,EAAAA,EAAmBF,GACnBG,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BF,EAAaG,EAAAA,EAAeA,EAEtD,IAAMC,EAASJ,EAARI,IAAAA,CACDC,EAAQD,MAAAA,EAAAA,KAAAA,EAAAA,EAAME,QAAQ,CAACC,gBAAgB,CAE7C,MACE,GAAAvC,EAAAG,GAAA,EAACqC,EAAAA,EAAGA,CAAAA,CAACC,QAAStB,EAAQuB,OAAQ1B,WAC5B,GAAAhB,EAAAC,IAAA,EAAC0C,EAAAA,CAAQtB,OAAO,mBACd,GAAArB,EAAAG,GAAA,EAACyC,EAAAA,EAAOA,CAAAA,UACN,GAAA5C,EAAAG,GAAA,EAAAH,EAAAE,QAAA,WAAGe,MAEL,GAAAjB,EAAAG,GAAA,EAACyC,EAAAA,EAAOA,CAAAA,UACLP,EAAQ,GAAArC,EAAAG,GAAA,EAACE,MAAAA,UAAKgC,EAAMQ,SAAS,GAAU,GAAA7C,EAAAG,GAAA,EAAC2C,EAAAA,EAAaA,CAAAA,CAACd,YAAaA,MAEtE,GAAAhC,EAAAG,GAAA,EAACyC,EAAAA,EAAOA,CAAAA,UACLP,EACC,GAAArC,EAAAG,GAAA,EAAAH,EAAAE,QAAA,WAAGmC,EAAMU,YAAY,CAACC,MAAM,CAAC,SAACC,CAAAA,QAAM,CAAC,CAACA,EAAEC,iBAAiB,GAAE3D,MAAM,GAEjE,GAAAS,EAAAG,GAAA,EAAC2C,EAAAA,EAAaA,CAAAA,CAACd,YAAaA,MAGhC,GAAAhC,EAAAG,GAAA,EAACyC,EAAAA,EAAOA,CAAAA,UACLP,EACC,GAAArC,EAAAG,GAAA,EAAAH,EAAAE,QAAA,WAAGmC,EAAMU,YAAY,CAACC,MAAM,CAAC,SAACC,CAAAA,QAAM,CAACA,EAAEC,iBAAiB,GAAE3D,MAAM,GAEhE,GAAAS,EAAAG,GAAA,EAAC2C,EAAAA,EAAaA,CAAAA,CAACd,YAAaA,MAGhC,GAAAhC,EAAAG,GAAA,EAACyC,EAAAA,EAAOA,CAAAA,UACLP,EACC,GAAArC,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CAAC+B,KAAM,CAACC,UAAW,MAAOC,IAAK,GAAIC,WAAY,QAAQ,YACzD,GAAAtD,EAAAG,GAAA,EAACoD,OAAAA,UAAMlB,EAAMU,YAAY,CAACxD,MAAM,GAChC,GAAAS,EAAAG,GAAA,EAACqD,EAAAA,CAAGA,CAAAA,CAACC,OAAO,UAAUC,YAAW,YAC/B,GAAA1D,EAAAG,GAAA,EAACwD,EAAAA,CAAUA,CAAAA,CACTC,QAAS,WACP3E,EAASoD,EAAMpB,cAAc,CAC/B,WACD,kBAML,GAAAjB,EAAAG,GAAA,EAAC2C,EAAAA,EAAaA,CAAAA,CAACd,YAAaA,MAGhC,GAAAhC,EAAAG,GAAA,EAACyC,EAAAA,EAAOA,CAAAA,UACN,GAAA5C,EAAAG,GAAA,EAAC0D,2BAAAA,CACC5C,eAAgBA,EAChBlC,OAAQA,EACRC,SAAUA,UAMtB,EAEM6E,2BAA6B,SAAAhF,CAAA,MACjCoC,EAAAA,EAAAA,cAAAA,CACAjC,EAAAA,EAAAA,QAAAA,CACAD,EAAAA,EAAAA,MAAAA,CAMA,MACE,GAAAiB,EAAAG,GAAA,EAAC2D,EAAAA,CAAOA,CAAAA,CACNC,QACE,GAAA/D,EAAAC,IAAA,EAAC+D,EAAAA,EAAIA,CAAAA,WACH,GAAAhE,EAAAG,GAAA,EAAC8D,EAAAA,EAAQA,CAAAA,CAACC,KAAK,OAAOC,KAAK,OAAOP,QAAS,kBAAM7E,EAAOkC,MACxD,GAAAjB,EAAAG,GAAA,EAAC8D,EAAAA,EAAQA,CAAAA,CACPC,KAAK,SACLT,OAAO,SACPU,KAAK,SACLP,QAAS,kBAAM5E,EAASiC,SAI9BmD,SAAS,uBAET,GAAApE,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CAACH,KAAM,GAAAlE,EAAAG,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,mBAG/B,EAEM1C,EAA+B2C,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,mBAuBlC7B,EAAU8B,CAAAA,EAAAA,EAAAA,EAAAA,EAAOrD,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,kDAECzC,osFClKpB,IAAM+F,EAAiCC,EAAAA,IAAU,CAAC,WACvDC,CAAAA,EAAAA,EAAAA,EAAAA,IACAC,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,eACjB,IAAsCC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAA2C,CAC/EC,SAAU,KACZ,MAFOC,EAA+BF,CAAAA,CAAAA,EAAAA,CAAlBG,EAAkBH,CAAAA,CAAAA,EAAAA,CAGhC9C,EAAckD,CAAAA,EAAAA,EAAAA,CAAAA,EAGlBC,GAAmC,CACnCC,4BAA6B,EAC/B,GAEMC,EAAenD,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BF,EAAaG,EAAAA,EAAeA,EACrEC,EAASJ,EAARI,IAAAA,CAEP,MACE,GAAApC,EAAAG,GAAA,EAACE,MAAAA,CAAIC,MAAO,CAACgF,UAAW,MAAM,WAC3BlD,EACC,GAAApC,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACE,GAAAF,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACmE,OAAQ,CAACC,OAAQ,EAAE,WACtB,GAAAxF,EAAAG,GAAA,EAACsF,sBAAAA,CACCJ,aAAcA,EACdK,YAAa,CAAC,CAACtD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAME,QAAQ,CAACqD,mBAAmB,EACjDC,eAAgBxD,MAAAA,EAAAA,KAAAA,EAAAA,EAAME,QAAQ,CAACsD,cAAc,KAGjD,GAAA5F,EAAAG,GAAA,EAAC0F,kBAAAA,CACCC,eAAgB1D,EAAKE,QAAQ,CAACyD,IAAI,CAClCjH,gBAAiBsD,EAAKE,QAAQ,CAAC0D,iBAAiB,CAACpF,GAAG,CAAC,SAACyB,CAAAA,SAAUA,EAAMpB,cAAc,GACpFgF,WAAY7D,EAAKE,QAAQ,CAAC4D,yBAAyB,CACnDC,QAASnE,EAAYmE,OAAO,CAC5BC,SAAUhE,EAAKE,QAAQ,CAAC+D,wBAAwB,CAChDC,SAAUlE,EAAKE,QAAQ,CAACiE,wBAAwB,CAChDvB,YAAaA,EACbwB,YAAavB,OAIjB,GAAAjF,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACqF,QAAS,CAACC,SAAU,EAAE,WACzB,GAAA1G,EAAAG,GAAA,EAACwG,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,eAK3B,GAEaC,wBAA0B,WACrC,IAAMC,EAAcnC,EAAAA,UAAgB,CAACoC,EAAAA,CAAmBA,EAAjDD,SAAAA,CACP,MACE,GAAA9G,EAAAC,IAAA,EAAC+G,EAAAA,CAAIA,CAAAA,WACH,GAAAhH,EAAAG,GAAA,EAAC8G,EAAAA,CAAUA,CAAAA,CACTC,MAAO,GAAAlH,EAAAG,GAAA,EAACgH,EAAAA,EAAOA,CAAAA,UAAEL,IACjBM,KAAM,GAAApH,EAAAG,GAAA,EAACkH,EAAAA,CAAYA,CAAAA,CAACC,IAAI,kBAE1B,GAAAtH,EAAAG,GAAA,EAACuE,EAAAA,CAAAA,KAGP,EAIA6C,GAAeV,wBAgBFpB,sBAAwB,SAAA5G,CAAA,MACnC6G,EAAAA,EAAAA,WAAAA,CACAE,EAAAA,EAAAA,cAAAA,CACA7G,EAAAA,EAAAA,MAAAA,CACAsG,EAAAA,EAAAA,YAAAA,CAOA,GAAI,CAACK,EACH,MACE,GAAA1F,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACE,GAAAF,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CACFqF,QAAS,CAACC,SAAU,GAAIc,WAAY,EAAE,EACtCnG,OAAO,SACP8B,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUmE,eAAgB,eAAe,YAE9E,GAAAzH,EAAAG,GAAA,EAACuH,EAAAA,EAAUA,CAAAA,UAAC,oBACXrC,EAAe,GAAArF,EAAAG,GAAA,EAACwH,EAAAA,EAAqBA,CAAAA,CAACtC,aAAcA,IAAmB,QAE1E,GAAArF,EAAAC,IAAA,EAACI,MAAAA,WAAI,oIAEwC,GAAAL,EAAAG,GAAA,EAACyH,EAAAA,EAAIA,CAAAA,UAAC,yBAA2B,WAAS,IACrF,GAAA5H,EAAAG,GAAA,EAACyH,EAAAA,EAAIA,CAAAA,UAAC,iBAAmB,YAAU,IACnC,GAAA5H,EAAAG,GAAA,EAAC0H,IAAAA,CACCC,OAAO,SACPC,IAAI,aACJC,KAAK,oFACN,uCAEI,IAAI,8BAOjB,IAAMC,EACJ,GAAAjI,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CAACqF,QAAS,CAACC,SAAU,GAAIc,WAAY,EAAE,YAAG,iEACmB,IAC/D,GAAAxH,EAAAG,GAAA,EAAC0H,IAAAA,CACCC,OAAO,SACPC,IAAI,aACJC,KAAK,mHACN,kCAEI,IAAI,2BAKPE,EAAmBtC,EACvB,GAAA5F,EAAAG,GAAA,EAACgI,EAAAA,EAAgBA,CAAAA,UACf,GAAAnI,EAAAC,IAAA,EAACmI,QAAAA,WACC,GAAApI,EAAAC,IAAA,EAACoI,KAAAA,WACC,GAAArI,EAAAG,GAAA,EAACmI,KAAAA,UAAG,yBACJ,GAAAtI,EAAAG,GAAA,EAACmI,KAAAA,UAAI1C,EAAe2C,iBAAiB,MAEvC,GAAAvI,EAAAC,IAAA,EAACoI,KAAAA,WACC,GAAArI,EAAAG,GAAA,EAACmI,KAAAA,UAAG,4BACJ,GAAAtI,EAAAG,GAAA,EAACmI,KAAAA,UACE1C,EAAe4C,wBAAwB,CACtC,GAAAxI,EAAAG,GAAA,EAACsI,EAAAA,CAAmBA,CAAAA,CAClBC,MAAO9C,EAAe4C,wBAAwB,CAC9CG,QAAS,CAACC,SAAU,GAAMC,YAAa,GAAMC,KAAM,MAAM,IAG3D,cAMR,KAEJ,MACE,GAAA9I,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACE,GAAAF,EAAAG,GAAA,EAAC4I,0BAAAA,CAA0BhK,OAAQA,EAAQsG,aAAcA,IACxD4C,EACAC,IAGP,EAEMa,0BAA4B,SAAAlK,CAAA,MAChCE,EAAAA,EAAAA,MAAAA,CACAsG,EAAAA,EAAAA,YAAAA,OAKA,GAAArF,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CACF+B,KAAM,CAACsE,eAAgB,gBAAiBnE,WAAY,QAAQ,EAC5DmD,QAAS,CAACC,SAAU,GAAIc,WAAY,EAAE,EACtCnG,OAAO,mBAEP,GAAArB,EAAAG,GAAA,EAACuH,EAAAA,EAAUA,CAAAA,UAAC,oBACZ,GAAA1H,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CAAC+B,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUD,IAAK,CAAC,YACvDgC,EAAe,GAAArF,EAAAG,GAAA,EAACwH,EAAAA,EAAqBA,CAAAA,CAACtC,aAAcA,IAAmB,KACvEtG,EACC,GAAAiB,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CAACH,KAAM,GAAAlE,EAAAG,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,SAAWX,QAAS,kBAAM7E,cAAU,uBAG3D,YAKG8G,kBAAoB,SAAAhH,CAAA,MAC/BiH,EAAAA,EAAAA,cAAAA,CACAG,EAAAA,EAAAA,UAAAA,CACAnH,EAAAA,EAAAA,eAAAA,CACAqH,EAAAA,EAAAA,OAAAA,CACAC,EAAAA,EAAAA,QAAAA,CACAE,EAAAA,EAAAA,QAAAA,CACAtB,EAAAA,EAAAA,WAAAA,CACAwB,EAAAA,EAAAA,WAAAA,CAW4B7B,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,MAAnCqE,EAAqBrE,CAAAA,CAAAA,EAAAA,CAAbsE,EAAatE,CAAAA,CAAAA,EAAAA,CACtBuE,EAAgCvE,EAAAA,WAAiB,CAAC,WACtD6B,EAAY2C,KAAAA,EACd,EAAG,CAAC3C,EAAY,EAEV4C,EAAazE,EAAAA,OAAa,CAAC,WAC/B,MAAO,GAAA0E,EAAAC,CAAA,EAAIxK,GAAiByK,IAAI,CAAC,SAAC1B,CAAAA,CAAG2B,CAAAA,SAAMC,EAAAA,EAAeA,CAACC,OAAO,CAAC7B,EAAG2B,IACxE,EAAG,CAAC1K,EAAgB,EAEd6K,MAAQ,WACZV,EAAU,CAACW,WAAY,KAAK,EAC9B,QAQA,CAAK3D,GAAcH,GAAkBA,EAAe+D,QAAQ,CAAC,yBAEzD,GAAA7J,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACE,GAAAF,EAAAG,GAAA,EAAC2J,uBAAAA,CAAAA,GACD,GAAA9J,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACmE,OAAQ,YACX,GAAAvF,EAAAG,GAAA,EAAC4J,EAAAA,CAAaA,CAAAA,CACZ7F,KAAK,QACLgD,MAAM,yBACN8C,YACE,4KAQD/D,CAAe,IAAfA,EAEP,GAAAjG,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACE,GAAAF,EAAAG,GAAA,EAAC2J,uBAAAA,CAAAA,GACD,GAAA9J,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACmE,OAAQ,YACX,GAAAvF,EAAAG,GAAA,EAAC4J,EAAAA,CAAaA,CAAAA,CACZ7F,KAAK,QACLgD,MAAM,yBACN8C,YACE,yMAWV,GAAAhK,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACE,GAAAF,EAAAG,GAAA,EAAC2J,uBAAAA,CAAuBH,MAAOA,QAC9B7K,IAAAA,EAAgBS,MAAM,CACrB,GAAAS,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACmE,OAAQ,YACX,GAAAvF,EAAAG,GAAA,EAAC4J,EAAAA,CAAaA,CAAAA,CACZ7F,KAAK,QACLgD,MAAM,wBACN8C,YACE,GAAAhK,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YAAE,oEAEA,GAAAF,EAAAG,GAAA,EAACwD,EAAAA,CAAUA,CAAAA,CAACC,QAAS,kBAAM+F,kBAAS,4BAAoC,WAMhF,GAAA3J,EAAAG,GAAA,EAACvB,iBAAgBA,CACfE,gBAAiBsK,EACjBpK,SA3DS,SAACiC,CAAAA,EAChBgI,EAAU,CAACW,WAAY,SAAU3I,eAAAA,CAAc,EACjD,EA0DQlC,OA/DO,SAACkC,CAAAA,EACdgI,EAAU,CAACW,WAAY,OAAQ3I,eAAAA,CAAc,EAC/C,EA8DQhC,SAAUuH,IAGd,GAAAxG,EAAAG,GAAA,EAAC8J,0BAAAA,CACCC,KAAMlB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQY,UAAU,IAAK,MAC7BO,QAAS,kBAAMlB,EAAUE,KAAAA,IACzBiB,WAAYjE,EACZC,SAAUA,MAAAA,EAAAA,EArSQ,EAsSlBE,SAAUA,MAAAA,EAAAA,EArSQ,MAuSpB,GAAAtG,EAAAG,GAAA,EAACkK,6BAAAA,CACCpJ,eAAgB+H,GAAUA,WAAAA,EAAOY,UAAU,CAAgBZ,EAAO/H,cAAc,CAAG,GACnFiJ,KAAMlB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQY,UAAU,IAAK,SAC7BO,QAAS,kBAAMlB,EAAUE,KAAAA,IACzBiB,WAAYjE,IAEd,GAAAnG,EAAAG,GAAA,EAACmK,2BAAAA,CACCJ,KAAMlB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQY,UAAU,IAAK,OAC7BO,QAAS,kBAAMlB,EAAUE,KAAAA,IACzBiB,WAAYjE,EACZlF,eAAgB+H,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQY,UAAU,IAAK,OAASZ,EAAO/H,cAAc,CAAG,GACxEmF,SAAUA,MAAAA,EAAAA,EAnTQ,EAoTlBE,SAAUA,MAAAA,EAAAA,EAnTQ,MAqTpB,GAAAtG,EAAAG,GAAA,EAACoK,uBAAAA,CACCrD,MACE,GAAAlH,EAAAC,IAAA,EAACsD,OAAAA,WAAK,yBACkB,GAAAvD,EAAAG,GAAA,EAACqK,SAAAA,UAAQxF,OAGnCmF,QAASjB,EACTjI,eAAgB+D,EAChByF,SAAUtE,MAIlB,EAEM2D,uBAAyB,SAAAjL,CAAA,MAAE8K,EAAAA,EAAAA,KAAAA,OAC/B,GAAA3J,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CACF+B,KAAM,CAACsE,eAAgB,gBAAiBnE,WAAY,QAAQ,EAC5DmD,QAAS,CAACC,SAAU,GAAIc,WAAY,EAAE,EACtCnG,OAAO,2BAEP,GAAArB,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CAAC+B,KAAM,CAACG,WAAY,SAAUF,UAAW,MAAOC,IAAK,CAAC,YACxD,GAAArD,EAAAG,GAAA,EAACuH,EAAAA,EAAUA,CAAAA,UAAC,gCACZ,GAAA1H,EAAAG,GAAA,EAACqD,EAAAA,CAAGA,CAAAA,UAAC,oBAENmG,EACC,GAAA3J,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CAACH,KAAM,GAAAlE,EAAAG,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,eAAiBX,QAAS,kBAAM+F,cAAS,0BAGhE,SAIFe,aAAe,SACnBnI,CAAAA,MACAoI,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAxVwB,EAyVxBC,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAxVwB,IA0VxB,GAAI,CAACrI,EACH,MAAO,GAET,IAAMmG,EAAQmC,SAAStI,SACvB,CAAIuI,MAAMpC,IAGNqC,OAAOrC,KAAWnG,EAAiByI,IAAI,IAGpCtC,GAASiC,GAAiBjC,GAASkC,CAC5C,EAEMX,0BAA4B,SAAApL,CAAA,QAChCqL,EAAAA,EAAAA,IAAAA,CACAC,EAAAA,EAAAA,OAAAA,CACAC,EAAAA,EAAAA,UAAAA,CACA9D,EAAAA,EAAAA,QAAAA,CACAF,EAAAA,EAAAA,QAAAA,CAQwCzB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAAhDsG,EAAiCtG,CAAAA,CAAAA,EAAAA,CAAnBuG,EAAmBvG,CAAAA,CAAAA,EAAAA,CACJA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAA5CwG,EAA6BxG,CAAAA,CAAAA,EAAAA,CAAjByG,EAAiBzG,CAAAA,CAAAA,EAAAA,CACJA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAAxC0G,EAAyB1G,CAAAA,CAAAA,EAAAA,CAAf2G,EAAe3G,CAAAA,CAAAA,EAAAA,CAEhCA,EAAAA,SAAe,CAAC,WACdyG,EAAc,IACdE,EAAY,GACd,EAAG,CAACpB,EAAK,EAET,IAAOqB,EAAuBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAG5BC,IAAAA,EAH4BD,CAAAA,EAAAA,CAKxBE,KAAO,GAAAC,EAAArC,CAAA,oEAEX,OADA4B,EAAgB,IAChB,GAAMK,EAAoB,CACxBzJ,UAAW,CAACb,eAAgBoK,EAAUhJ,MAAOwI,SAASM,EAAWH,IAAI,GAAG,CAC1E,kBAFAY,EAAAC,IAAA,GAGAX,EAAgB,IAChBd,IACAD,UACF,+CAEA,MACE,GAAAnK,EAAAC,IAAA,EAAC6L,EAAAA,EAAMA,CAAAA,CAACC,OAAQ7B,EAAMhD,MAAM,wBAAwBiD,QAASA,YAC3D,GAAAnK,EAAAC,IAAA,EAAC+L,EAAAA,EAAUA,CAAAA,WACT,GAAAhM,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACmE,OAAQ,CAACC,OAAQ,CAAC,WAAG,qBAC1B,GAAAxF,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACmE,OAAQ,CAACC,OAAQ,EAAE,WACtB,GAAAxF,EAAAG,GAAA,EAAC8L,EAAAA,EAASA,CAAAA,CACRvD,MAAO2C,GAAY,GACnBa,SAAU,SAACC,CAAAA,SAAMb,EAAYa,EAAErE,MAAM,CAACY,KAAK,GAC3C0D,YAAY,sBAGhB,GAAApM,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CAACmE,OAAQ,CAACC,OAAQ,CAAC,YAAG,sBACJY,EAAS,IAAEE,EAAS,QAE1C,GAAAtG,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,UACF,GAAApB,EAAAG,GAAA,EAAC8L,EAAAA,EAASA,CAAAA,CACRvD,MAAOyC,GAAc,GACrBe,SAAU,SAACC,CAAAA,SAAMf,EAAce,EAAErE,MAAM,CAACY,KAAK,GAC7C0D,YAAa,GAAiB9F,MAAAA,CAAdF,EAAS,OAAciG,MAAA,CAAT/F,UAIpC,GAAAtG,EAAAC,IAAA,EAACqM,EAAAA,EAAYA,CAAAA,WACX,GAAAtM,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CAACZ,OAAO,OAAOG,QAASuG,WAAS,WAGxC,GAAAnK,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CACLZ,OAAO,UACPG,QAAS8H,EACTa,SACE,CAAC7B,aAAaS,EAAWH,IAAI,GAAI5E,EAAUE,IAAa,CAAC+E,GAAYJ,WAGtEA,EAAe,YAAc,mBAKxC,EAEMX,2BAA6B,SAAAzL,CAAA,QACjCoC,EAAAA,EAAAA,cAAAA,CACAiJ,EAAAA,EAAAA,IAAAA,CACAC,EAAAA,EAAAA,OAAAA,CACAC,EAAAA,EAAAA,UAAAA,CACAhE,EAAAA,EAAAA,QAAAA,CACAE,EAAAA,EAAAA,QAAAA,CASwC3B,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAAhDsG,EAAiCtG,CAAAA,CAAAA,EAAAA,CAAnBuG,EAAmBvG,CAAAA,CAAAA,EAAAA,CACJA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAA5CwG,EAA6BxG,CAAAA,CAAAA,EAAAA,CAAjByG,EAAiBzG,CAAAA,CAAAA,EAAAA,CAEpCA,EAAAA,SAAe,CAAC,WACdyG,EAAc,GAChB,EAAG,CAAClB,EAAK,EAET,IAAOqB,EAAuBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAG5BC,IAAAA,EAH4BD,CAAAA,EAAAA,CAKxBE,KAAO,GAAAC,EAAArC,CAAA,oEAEX,OADA4B,EAAgB,IAChB,GAAMK,EAAoB,CACxBzJ,UAAW,CAACb,eAAAA,EAAgBoB,MAAOwI,SAASM,EAAYH,IAAI,GAAG,CACjE,kBAFAY,EAAAC,IAAA,GAGAX,EAAgB,IAChBd,IACAD,UACF,+CAEMjD,EACJ,GAAAlH,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YAAE,QACK,GAAAF,EAAAG,GAAA,EAACyH,EAAAA,EAAIA,CAAAA,UAAE3G,OAIhB,MACE,GAAAjB,EAAAC,IAAA,EAAC6L,EAAAA,EAAMA,CAAAA,CAACC,OAAQ7B,EAAMhD,MAAOA,EAAOiD,QAASA,YAC3C,GAAAnK,EAAAC,IAAA,EAAC+L,EAAAA,EAAUA,CAAAA,WACT,GAAAhM,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACmE,OAAQ,CAACC,OAAQ,CAAC,WAAG,qBAC1B,GAAAxF,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACmE,OAAQ,CAACC,OAAQ,EAAE,WACtB,GAAAxF,EAAAG,GAAA,EAACqK,SAAAA,UAAQvJ,MAEX,GAAAjB,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CAACmE,OAAQ,CAACC,OAAQ,CAAC,YAAG,sBACJY,EAAS,IAAEE,EAAS,QAE1C,GAAAtG,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,UACF,GAAApB,EAAAG,GAAA,EAAC8L,EAAAA,EAASA,CAAAA,CACRvD,MAAOyC,GAAc,GACrBe,SAAU,SAACC,CAAAA,SAAMf,EAAce,EAAErE,MAAM,CAACY,KAAK,GAC7C0D,YAAa,GAAiB9F,MAAAA,CAAdF,EAAS,OAAciG,MAAA,CAAT/F,UAIpC,GAAAtG,EAAAC,IAAA,EAACqM,EAAAA,EAAYA,CAAAA,WACX,GAAAtM,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CAACZ,OAAO,OAAOG,QAASuG,WAAS,UAGvCc,EACC,GAAAjL,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CAACZ,OAAO,UAAU8I,SAAQ,YAAC,gBAIlC,GAAAvM,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CACLZ,OAAO,UACPG,QAAS8H,EACTa,SAAU,CAAC7B,aAAaS,EAAWH,IAAI,GAAI5E,EAAUE,YACtD,sBAOX,EAEM+D,6BAA+B,SAAAxL,CAAA,QACnCoC,EAAAA,EAAAA,cAAAA,CACAiJ,EAAAA,EAAAA,IAAAA,CACAC,EAAAA,EAAAA,OAAAA,CACAC,EAAAA,EAAAA,UAAAA,CAOwCzF,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAAhDsG,EAAiCtG,CAAAA,CAAAA,EAAAA,CAAnBuG,EAAmBvG,CAAAA,CAAAA,EAAAA,CAEjC6H,EAA0BhB,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAG/BiB,IAAAA,EAH+BjB,CAAAA,EAAAA,CAK3BE,KAAO,GAAAC,EAAArC,CAAA,oEAEX,OADA4B,EAAgB,IAChB,GAAMsB,EAAuB,CAAC1K,UAAW,CAACb,eAAAA,CAAc,CAAC,kBAAzD2K,EAAAC,IAAA,GACAX,EAAgB,IAChBd,IACAD,UACF,+CAEMjD,EACJ,GAAAlH,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YAAE,UACO,GAAAF,EAAAG,GAAA,EAACyH,EAAAA,EAAIA,CAAAA,UAAE3G,OAGlB,MACE,GAAAjB,EAAAC,IAAA,EAAC6L,EAAAA,EAAMA,CAAAA,CAACC,OAAQ7B,EAAMhD,MAAOA,EAAOiD,QAASA,YAC3C,GAAAnK,EAAAC,IAAA,EAAC+L,EAAAA,EAAUA,CAAAA,WAAC,+BACoB,GAAAhM,EAAAG,GAAA,EAACqK,SAAAA,UAAQvJ,IAAwB,OAEjE,GAAAjB,EAAAC,IAAA,EAACqM,EAAAA,EAAYA,CAAAA,WACX,GAAAtM,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CAACZ,OAAO,OAAOG,QAASuG,WAAS,UAGvCc,EACC,GAAAjL,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CAACZ,OAAO,SAAS8I,SAAQ,YAAC,gBAIjC,GAAAvM,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CAACZ,OAAO,SAASG,QAAS8H,WAAM,sBAOjD,EAEMgB,sBAAwB,SAAA7N,CAAA,MAC5B8N,EAAAA,EAAAA,WAAAA,CACAlC,EAAAA,EAAAA,QAAAA,CAKOmC,EAAapB,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAGlBqB,IAAAA,EAHkBrB,CAAAA,EAAAA,CAKpB,MACE,GAAAxL,EAAAG,GAAA,EAAC2D,EAAAA,CAAOA,CAAAA,CACNC,QACE,GAAA/D,EAAAC,IAAA,EAAC+D,EAAAA,EAAIA,CAAAA,WACH,GAAAhE,EAAAG,GAAA,EAAC8D,EAAAA,EAAQA,CAAAA,CAEPC,KAAK,SACLC,KAAK,iCACLP,QAAS,GAAA+H,EAAArC,CAAA,iBAIHwD,yDAHS,SAAMF,EAAU,CAC3B9K,UAAW,CAACiL,MAAOJ,EAAYI,KAAK,CAAEC,QAASL,EAAYK,OAAO,CACpE,gBACa,OAATF,CAAAA,EAAAA,EAHSjB,IAAA,GAGJzJ,IAAI,GAAT0K,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAWG,oBAAoB,cAEjC,OADAxC,IACA,GAAMyC,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,CACtBzJ,OAAQ,UACRS,KAAM,yBACNiJ,QAAS,wBACX,WAJAvB,EAAAC,IAAA,gCAMJ,IAfI,+BAiBN,GAAA7L,EAAAG,GAAA,EAAC8D,EAAAA,EAAQA,CAAAA,CAEPC,KAAK,SACLC,KAAK,qCACLP,QAAS,GAAA+H,EAAArC,CAAA,iBAGHwD,yDAFJ,SAAMI,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,CAACC,QAAS,8BAA8B,WACnD,OADbvB,EAAAC,IAAA,GACa,GAAMe,EAAU,CAAC9K,UAAW,CAACiL,MAAOJ,EAAYI,KAAK,CAAC,gBACtD,OAATD,CAAAA,EAAAA,EADSjB,IAAA,GACJzJ,IAAI,GAAT0K,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAWG,oBAAoB,cAEjC,OADAxC,IACA,GAAMyC,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,CACtBzJ,OAAQ,UACRS,KAAM,yBACNiJ,QAAS,yBACX,WAJAvB,EAAAC,IAAA,gCAMJ,IAdI,iCAkBVzH,SAAS,wBAET,GAAApE,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CAAC+I,UAAW,GAAApN,EAAAG,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,yBAAkB,aAGtD,EAEMgG,uBAAyB,SAAA1L,CAAA,MAC7BoC,EAAAA,EAAAA,cAAAA,CACAkJ,EAAAA,EAAAA,OAAAA,CACAjD,EAAAA,EAAAA,KAAAA,CACAuD,EAAAA,EAAAA,QAAAA,CAOMzI,EAAckD,CAAAA,EAAAA,EAAAA,CAAAA,EAClBmI,GACA,CACEvL,UAAW,CACTb,eAAgBA,GAAkB,EACpC,EACAqM,KAAM,CAACrM,CACT,GAEFiB,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BF,EAAaG,EAAAA,EAAeA,EACtD,IAAMC,EAASJ,EAARI,IAAAA,CACD+D,EAAUxB,EAAAA,WAAiB,CAAC,WAChC3C,EAAYmE,OAAO,GACnBsE,GACF,EAAG,CAACzI,EAAayI,EAAS,EAE1B,MACE,GAAAzK,EAAAC,IAAA,EAAC6L,EAAAA,EAAMA,CAAAA,CACLC,OAAQ,CAAC,CAAC9K,EACViG,MAAOA,EACPiD,QAASA,EACT7J,MAAO,CACLiN,SAAU,QACVC,SAAU,SACVC,MAAO,OACPC,UAAW,MACb,YAEA,GAAA1N,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACqF,QAAS,CAACC,SAAU,EAAE,EAAGvD,KAAM,CAACwK,KAAM,CAAC,EAAGrN,MAAO,CAACgF,UAAW,MAAM,WACrE,EAKC,GAAAtF,EAAAG,GAAA,EAACyN,kBAAAA,CAAkBC,QAASzL,EAAKE,QAAQ,CAACC,gBAAgB,CAAEuL,QAAS3H,IAJrE,GAAAnG,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACqF,QAAS,CAACC,SAAU,EAAE,WACzB,GAAA1G,EAAAG,GAAA,EAACwG,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,gBAMvB,GAAA5G,EAAAG,GAAA,EAACmM,EAAAA,EAAYA,CAAAA,UACX,GAAAtM,EAAAG,GAAA,EAACkE,EAAAA,EAAMA,CAAAA,CAACZ,OAAO,OAAOG,QAASuG,WAAS,cAMhD,EAEMyD,kBAAoB,SAAA/O,CAAA,MAmBtBmD,EAlBF6L,EAAAA,EAAAA,OAAAA,CACAC,EAAAA,EAAAA,OAAAA,CAKMC,EAAU,GAAA1E,EAAAC,CAAA,EAAG,IAAI0E,IAAIH,EAAQ9K,YAAY,CAACnC,GAAG,CAAC,SAACqN,CAAAA,SAASA,EAAKlB,KAAK,KAClE/K,EAAckD,CAAAA,EAAAA,EAAAA,CAAAA,EAClBgJ,GACA,CACEpM,UAAW,CACTkB,OAAQ,CAAC+K,OAAAA,CAAM,CACjB,EACAT,KAAM,CAACO,EAAQ9K,YAAY,CAACxD,MAAM,GAGhC4O,EAA2C,CAAC,EAKlDC,CAHEpM,CAAAA,OAAAA,CAAAA,EAAAA,EAAYI,IAAI,GAAhBJ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkBqM,mBAAmB,CAACC,UAAU,IAAK,OACjDtM,EAAYI,IAAI,CAACiM,mBAAmB,CAACE,OAAO,CAC5C,EAAE,EACHC,OAAO,CAAC,SAACC,CAAAA,EACZN,CAAa,CAACM,EAAIC,EAAE,CAAC,CAAGD,EAAIE,MAAM,GAGpC,IAAMC,EAAS,GAAAvF,EAAAC,CAAA,EAAGuE,EAAQ9K,YAAY,EACtC6L,EAAMrF,IAAI,CAAC,SAAC1B,CAAAA,CAAG2B,CAAAA,SACb,EAAMqF,QAAQ,EAAIrF,EAAEqF,QAAQ,EAAIhH,EAAEgH,QAAQ,GAAKrF,EAAEqF,QAAQ,CAChDhH,EAAEgH,QAAQ,CAAGrF,EAAEqF,QAAQ,CAEzBhH,EAAEiH,iBAAiB,CAAGtF,EAAEsF,iBAAiB,GAElD,IAAMC,EAAgBH,EAAM5L,MAAM,CAAC,SAACiL,CAAAA,QAAS,CAAC,CAACA,EAAK/K,iBAAiB,GAC/DH,EAAe6L,EAAM5L,MAAM,CAAC,SAACiL,CAAAA,QAAS,CAACA,EAAK/K,iBAAiB,GAE7D8L,EACJ,GAAAhP,EAAAG,GAAA,EAAC8O,QAAAA,UACC,GAAAjP,EAAAC,IAAA,EAACoI,KAAAA,WACC,GAAArI,EAAAG,GAAA,EAAC+O,KAAAA,UAAG,WACJ,GAAAlP,EAAAG,GAAA,EAAC+O,KAAAA,UAAG,aACJ,GAAAlP,EAAAG,GAAA,EAAC+O,KAAAA,UAAG,aACJ,GAAAlP,EAAAG,GAAA,EAAC+O,KAAAA,UAAG,WACJ,GAAAlP,EAAAG,GAAA,EAAC+O,KAAAA,UACC,GAAAlP,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CAAC+B,KAAM,CAACG,WAAY,SAAUF,UAAW,MAAOC,IAAK,CAAC,YAAG,WAE3D,GAAArD,EAAAG,GAAA,EAACgP,EAAAA,CAAOA,CAAAA,CACNC,UAAU,MACVrL,QAAQ,sIAER,GAAA/D,EAAAG,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,OAAO9C,MAAOC,EAAAA,EAAiB,YAIhD,GAAA1B,EAAAG,GAAA,EAAC+O,KAAAA,CAAAA,eAKP,EAAW3P,MAAM,CAsBf,GAAAS,EAAAC,IAAA,EAACoP,EAAAA,CAAKA,CAAAA,WACHL,EACD,GAAAhP,EAAAG,GAAA,EAACiI,QAAAA,CAAM9H,MAAO,CAACgP,gBAAiB5N,EAAAA,EAAuB,EAAE,WACtDqN,EAAcnO,GAAG,CAAC,SAACqN,CAAAA,QAClB,GAAAjO,EAAAG,GAAA,EAACoP,eAAAA,CAECtB,KAAMA,EACNE,cAAeA,EACf1D,SAAUqD,GAHLG,EAAKlB,KAAK,CAAGkB,EAAKjB,OAAO,MAOpC,GAAAhN,EAAAG,GAAA,EAACiI,QAAAA,UACErF,EAAanC,GAAG,CAAC,SAACqN,CAAAA,QACjB,GAAAjO,EAAAG,GAAA,EAACoP,eAAAA,CAECtB,KAAMA,EACNE,cAAeA,EACf1D,SAAUqD,GAHLG,EAAKlB,KAAK,CAAGkB,EAAKjB,OAAO,SAnCpC,GAAAhN,EAAAC,IAAA,EAACoP,EAAAA,CAAKA,CAAAA,WACHL,EACD,GAAAhP,EAAAG,GAAA,EAACiI,QAAAA,UACC,GAAApI,EAAAG,GAAA,EAACkI,KAAAA,UACC,GAAArI,EAAAG,GAAA,EAACmI,KAAAA,CAAGkH,QAAS,WACX,GAAAxP,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CACF+B,KAAM,CAACG,WAAY,SAAUmE,eAAgB,QAAQ,EACrDnH,MAAO,CAACmB,MAAOC,EAAAA,CAAgB,EAAE,EACjC+E,QAAS,YACV,2EAmCf,EAEM8I,eAAiB,SAAA1Q,CAAA,MACrBoP,EAAAA,EAAAA,IAAAA,CACAE,EAAAA,EAAAA,aAAAA,CACA1D,EAAAA,EAAAA,QAAAA,CAMMgF,EAAYtB,CAAa,CAACF,EAAKlB,KAAK,CAAC,CAC3C,MACE,GAAA/M,EAAAC,IAAA,EAACoI,KAAAA,WACC,GAAArI,EAAAG,GAAA,EAACmI,KAAAA,UACEmH,EACC,GAAAzP,EAAAG,GAAA,EAACuP,EAAAA,EAAIA,CAAAA,CAACC,GAAI,SAAoBtD,MAAA,CAAX4B,EAAKlB,KAAK,WAC3B,GAAA/M,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CAAC+B,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUD,IAAK,CAAC,YACxD,GAAArD,EAAAG,GAAA,EAACyP,EAAAA,EAAYA,CAAAA,CAACjB,OAAQc,EAAW1O,KAAM,KACvC,GAAAf,EAAAG,GAAA,EAACyH,EAAAA,EAAIA,CAAAA,UAAEiI,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CAACnB,GAAIT,EAAKlB,KAAK,KACjC+C,EAAAA,EAAcA,CAACC,GAAG,CAACN,GAClB,GAAAzP,EAAAG,GAAA,EAACgP,EAAAA,CAAOA,CAAAA,CACNC,UAAU,MACVrL,QAAQ,gHAER,GAAA/D,EAAAG,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,OAAO9C,MAAOC,EAAAA,EAAiB,OAE1C,UAIR,GAAA1B,EAAAG,GAAA,EAACyH,EAAAA,EAAIA,CAAAA,UAAEiI,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CAACnB,GAAIT,EAAKlB,KAAK,OAGtC,GAAA/M,EAAAG,GAAA,EAACmI,KAAAA,UACC,GAAAtI,EAAAG,GAAA,EAACyH,EAAAA,EAAIA,CAAAA,UAAEqG,EAAKjB,OAAO,KAErB,GAAAhN,EAAAG,GAAA,EAACmI,KAAAA,UACE2F,EAAK/K,iBAAiB,CACrB,GAAAlD,EAAAG,GAAA,EAAC6P,EAAAA,CAAWA,CAAAA,CAACC,UAAWhC,EAAK/K,iBAAiB,CAAEgN,QAAS,OAEzD,MAGJ,GAAAlQ,EAAAG,GAAA,EAACmI,KAAAA,UACE2F,EAAKa,iBAAiB,CACrB,GAAA9O,EAAAG,GAAA,EAAC6P,EAAAA,CAAWA,CAAAA,CAACC,UAAWhC,EAAKa,iBAAiB,CAAEoB,QAAS,OAEzD,MAGJ,GAAAlQ,EAAAG,GAAA,EAACmI,KAAAA,UAAI2F,EAAKY,QAAQ,GAClB,GAAA7O,EAAAG,GAAA,EAACmI,KAAAA,UACC,GAAAtI,EAAAG,GAAA,EAACuM,sBAAAA,CAAsBC,YAAasB,EAAMxD,SAAUA,QAI5D,EAEM0F,GAA4B3L,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,sCAS/B4L,GAA6B5L,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,sCAYlC2L,IAEEE,GAA4B7L,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,oBAOxBW,GAAoCX,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,mBAkBhD6L,IAGE5E,GAAiCjH,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,oBAMpCiI,GAAoCjI,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,oBAMhCqI,GAAkCrI,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,oBAM5C6I,GAAgC7I,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,mBASrC4L,IAGElC,GAAiC1J,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,iNCr+B7B8L,EAAsBC,CAAAA,EAAAA,EAAAA,IAAAA,EAAK,WACtC,IAAMC,EAAYC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,CAAuBA,EAA7CF,OAAAA,QAEP,EAKE,GAAAxQ,EAAAG,GAAA,EAACwQ,EAAAA,CAAcA,CAAAA,CACb5M,QAASyM,EAAQzM,OAAO,CACxBK,SAAS,SACTwM,UAAW,CAACC,OAAQ,CAACC,QAAS,GAAMnI,QAAS,CAACkI,OAAQ,CAAC,EAAG,GAAG,CAAC,CAAC,WAE/D,GAAA7Q,EAAAG,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,UAAU9C,MAAOC,EAAAA,EAAmB,OAT1C,IAYX,yBChBaqP,EAAkBR,CAAAA,EAAAA,EAAAA,IAAAA,EAAK,SAAA1R,CAAA,MAAEuN,EAAAA,EAAAA,WAAAA,CAC9B4E,EAAkBP,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,CAAuBA,EAAnDM,aAAAA,QAEP,EAIIA,YAAAA,EAAcC,IAAI,CAElB,GAAAjR,EAAAG,GAAA,EAACgP,EAAAA,CAAOA,CAAAA,CAACpL,QAASiN,EAAcjN,OAAO,CAAEqL,UAAU,kBACjD,GAAApP,EAAAG,GAAA,EAACwG,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,YAAYsK,UAAWxP,EAAAA,EAAiB,OAM7D,GAAA1B,EAAAG,GAAA,EAACwQ,EAAAA,CAAcA,CAAAA,CACb5M,QAASiN,EAAcjN,OAAO,CAC9BK,SAAS,SACTwM,UAAW,CAACC,OAAQ,CAACC,QAAS,GAAMnI,QAAS,CAACkI,OAAQ,CAAC,EAAG,GAAG,CAAC,CAAC,WAE/D,GAAA7Q,EAAAG,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,UAAU9C,MAAOC,EAAAA,EAAmB,OAjB1C0K,EAAc,GAAApM,EAAAG,GAAA,EAACE,MAAAA,CAAIC,MAAO,CAACmN,MAAO,MAAM,IAAQ,IAoB3D,cCbapG,aAAe,SAAoC8J,CAAAA,EAC9D,IAAO9L,EAAqB8L,EAArB9L,YAAAA,CAAciC,EAAO6J,EAAP7J,GAAAA,CAEf8J,EAAgBX,CAAAA,EAAAA,EAAAA,UAAAA,EAAW1J,EAAAA,CAAmBA,EAA7CqK,WAAAA,CACDC,EAAeC,CAAAA,EAAAA,EAAAA,CAAAA,IAErB,MACE,GAAAtR,EAAAC,IAAA,EAACmB,EAAAA,CAAGA,CAAAA,CAAC+B,KAAM,CAACC,UAAW,MAAOqE,eAAgB,gBAAiBnE,WAAY,UAAU,YACnF,GAAAtD,EAAAC,IAAA,EAACsR,EAAAA,EAAIA,CAAAA,CAACC,cAAelK,YACnB,GAAAtH,EAAAG,GAAA,EAACsR,EAAAA,CAAOA,CAAAA,CACN/C,GAAG,YACHxH,MAAM,iBACNyI,GAAG,aACHzL,KAAM,GAAAlE,EAAAG,GAAA,EAAC4Q,EAAeA,CAAC3E,YAAa,OAEtC,GAAApM,EAAAG,GAAA,EAACsR,EAAAA,CAAOA,CAAAA,CAAC/C,GAAG,SAASxH,MAAOkK,EAAazB,GAAG,UAAUzL,KAAM,GAAAlE,EAAAG,GAAA,EAACmQ,EAAmBA,CAAAA,KAC/Ee,EACC,GAAArR,EAAAG,GAAA,EAACsR,EAAAA,CAAOA,CAAAA,CAAC/C,GAAG,cAAcxH,MAAM,qBAAqByI,GAAG,iBACtD,KACH0B,EAAe,GAAArR,EAAAG,GAAA,EAACsR,EAAAA,CAAOA,CAAAA,CAAC/C,GAAG,SAASxH,MAAM,gBAAgByI,GAAG,YAAe,QAE9EtK,EACC,GAAArF,EAAAG,GAAA,EAACiB,EAAAA,CAAGA,CAAAA,CAACqF,QAAS,CAACjB,OAAQ,CAAC,WACtB,GAAAxF,EAAAG,GAAA,EAACwH,EAAAA,EAAqBA,CAAAA,CAACtC,aAAcA,MAErC,OAGV","sources":["webpack://_N_E/../ui-core/src/instance/VirtualizedInstanceConcurrencyTable.tsx","webpack://_N_E/../ui-core/src/instance/InstanceConcurrency.tsx","webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Icon,\n  Menu,\n  MenuItem,\n  Popover,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useRef} from 'react';\nimport styled from 'styled-components';\n\nimport {\n  SingleConcurrencyKeyQuery,\n  SingleConcurrencyKeyQueryVariables,\n} from './types/VirtualizedInstanceConcurrencyTable.types';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {LoadingOrNone, useDelayedRowQuery} from '../workspace/VirtualizedWorkspaceTable';\n\nconst TEMPLATE_COLUMNS = '1fr 150px 150px 150px 150px 150px';\n\nexport const ConcurrencyTable = ({\n  concurrencyKeys,\n  onEdit,\n  onDelete,\n  onSelect,\n}: {\n  concurrencyKeys: string[];\n  onEdit: (key: string) => void;\n  onDelete: (key: string) => void;\n  onSelect: (key: string | undefined) => void;\n}) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: concurrencyKeys.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <ConcurrencyHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const concurrencyKey = concurrencyKeys[index]!;\n              return (\n                <ConcurrencyRow\n                  key={key}\n                  concurrencyKey={concurrencyKey}\n                  onEdit={onEdit}\n                  onDelete={onDelete}\n                  onSelect={onSelect}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nconst ConcurrencyHeader = () => {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.textLight(),\n      }}\n    >\n      <HeaderCell>Concurrency key</HeaderCell>\n      <HeaderCell>Total slots</HeaderCell>\n      <HeaderCell>Assigned steps</HeaderCell>\n      <HeaderCell>Pending steps</HeaderCell>\n      <HeaderCell>All steps</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\nconst ConcurrencyRow = ({\n  concurrencyKey,\n  onEdit,\n  onDelete,\n  onSelect,\n  height,\n  start,\n}: {\n  concurrencyKey: string;\n  onDelete: (key: string) => void;\n  onEdit: (key: string) => void;\n  onSelect: (key: string | undefined) => void;\n  height: number;\n  start: number;\n}) => {\n  const [queryJob, queryResult] = useLazyQuery<\n    SingleConcurrencyKeyQuery,\n    SingleConcurrencyKeyQueryVariables\n  >(SINGLE_CONCURRENCY_KEY_QUERY, {\n    variables: {concurrencyKey},\n  });\n\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n  const limit = data?.instance.concurrencyLimit;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <>{concurrencyKey}</>\n        </RowCell>\n        <RowCell>\n          {limit ? <div>{limit.slotCount}</div> : <LoadingOrNone queryResult={queryResult} />}\n        </RowCell>\n        <RowCell>\n          {limit ? (\n            <>{limit.pendingSteps.filter((x) => !!x.assignedTimestamp).length}</>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {limit ? (\n            <>{limit.pendingSteps.filter((x) => !x.assignedTimestamp).length}</>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {limit ? (\n            <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n              <span>{limit.pendingSteps.length}</span>\n              <Tag intent=\"primary\" interactive>\n                <ButtonLink\n                  onClick={() => {\n                    onSelect(limit.concurrencyKey);\n                  }}\n                >\n                  View all\n                </ButtonLink>\n              </Tag>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <ConcurrencyLimitActionMenu\n            concurrencyKey={concurrencyKey}\n            onEdit={onEdit}\n            onDelete={onDelete}\n          />\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst ConcurrencyLimitActionMenu = ({\n  concurrencyKey,\n  onDelete,\n  onEdit,\n}: {\n  concurrencyKey: string;\n  onEdit: (key: string) => void;\n  onDelete: (key: string) => void;\n}) => {\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem icon=\"edit\" text=\"Edit\" onClick={() => onEdit(concurrencyKey)} />\n          <MenuItem\n            icon=\"delete\"\n            intent=\"danger\"\n            text=\"Delete\"\n            onClick={() => onDelete(concurrencyKey)}\n          />\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst SINGLE_CONCURRENCY_KEY_QUERY = gql`\n  query SingleConcurrencyKeyQuery($concurrencyKey: String!) {\n    instance {\n      id\n      concurrencyLimit(concurrencyKey: $concurrencyKey) {\n        concurrencyKey\n        slotCount\n        claimedSlots {\n          runId\n          stepKey\n        }\n        pendingSteps {\n          runId\n          stepKey\n          enqueuedTimestamp\n          assignedTimestamp\n          priority\n        }\n      }\n    }\n  }\n`;\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Heading,\n  Icon,\n  Menu,\n  MenuItem,\n  MetadataTableWIP,\n  Mono,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Popover,\n  Spinner,\n  StyledRawCodeMirror,\n  Subheading,\n  Table,\n  Tag,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {ConcurrencyTable} from './VirtualizedInstanceConcurrencyTable';\nimport {\n  ConcurrencyKeyDetailsQuery,\n  ConcurrencyKeyDetailsQueryVariables,\n  ConcurrencyLimitFragment,\n  ConcurrencyStepFragment,\n  DeleteConcurrencyLimitMutation,\n  DeleteConcurrencyLimitMutationVariables,\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n  InstanceConcurrencyLimitsQuery,\n  InstanceConcurrencyLimitsQueryVariables,\n  RunQueueConfigFragment,\n  RunsForConcurrencyKeyQuery,\n  RunsForConcurrencyKeyQueryVariables,\n  SetConcurrencyLimitMutation,\n  SetConcurrencyLimitMutationVariables,\n} from './types/InstanceConcurrency.types';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  QueryRefreshState,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RunStatusDot} from '../runs/RunStatusDots';\nimport {failedStatuses} from '../runs/RunStatuses';\nimport {titleForRun} from '../runs/RunUtils';\nimport {TimeElapsed} from '../runs/TimeElapsed';\n\nconst DEFAULT_MIN_VALUE = 1;\nconst DEFAULT_MAX_VALUE = 1000;\n\nexport const InstanceConcurrencyPageContent = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Concurrency');\n  const [selectedKey, setSelectedKey] = useQueryPersistedState<string | undefined>({\n    queryKey: 'key',\n  });\n  const queryResult = useQuery<\n    InstanceConcurrencyLimitsQuery,\n    InstanceConcurrencyLimitsQueryVariables\n  >(INSTANCE_CONCURRENCY_LIMITS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  return (\n    <div style={{overflowY: 'auto'}}>\n      {data ? (\n        <>\n          <Box margin={{bottom: 64}}>\n            <RunConcurrencyContent\n              refreshState={refreshState}\n              hasRunQueue={!!data?.instance.runQueuingSupported}\n              runQueueConfig={data?.instance.runQueueConfig}\n            />\n          </Box>\n          <ConcurrencyLimits\n            instanceConfig={data.instance.info}\n            concurrencyKeys={data.instance.concurrencyLimits.map((limit) => limit.concurrencyKey)}\n            hasSupport={data.instance.supportsConcurrencyLimits}\n            refetch={queryResult.refetch}\n            minValue={data.instance.minConcurrencyLimitValue}\n            maxValue={data.instance.maxConcurrencyLimitValue}\n            selectedKey={selectedKey}\n            onSelectKey={setSelectedKey}\n          />\n        </>\n      ) : (\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      )}\n    </div>\n  );\n});\n\nexport const InstanceConcurrencyPage = () => {\n  const {pageTitle} = React.useContext(InstancePageContext);\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"concurrency\" />}\n      />\n      <InstanceConcurrencyPageContent />\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConcurrencyPage;\n\ntype DialogAction =\n  | {\n      actionType: 'add';\n    }\n  | {\n      actionType: 'edit';\n      concurrencyKey: string;\n    }\n  | {\n      actionType: 'delete';\n      concurrencyKey: string;\n    }\n  | undefined;\n\nexport const RunConcurrencyContent = ({\n  hasRunQueue,\n  runQueueConfig,\n  onEdit,\n  refreshState,\n}: {\n  hasRunQueue: boolean;\n  runQueueConfig: RunQueueConfigFragment | null | undefined;\n  refreshState?: QueryRefreshState;\n  onEdit?: () => void;\n}) => {\n  if (!hasRunQueue) {\n    return (\n      <>\n        <Box\n          padding={{vertical: 16, horizontal: 24}}\n          border=\"bottom\"\n          flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n        >\n          <Subheading>Run concurrency</Subheading>\n          {refreshState ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n        </Box>\n        <div>\n          Run concurrency is not supported with this run coordinator. To enable run concurrency\n          limits, configure your instance to use the <Mono>QueuedRunCoordinator</Mono> in your{' '}\n          <Mono>dagster.yaml</Mono>. See the{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://docs.dagster.io/deployment/dagster-instance#queuedruncoordinator\"\n          >\n            QueuedRunCoordinator documentation\n          </a>{' '}\n          for more information.\n        </div>\n      </>\n    );\n  }\n\n  const infoContent = (\n    <Box padding={{vertical: 16, horizontal: 24}}>\n      Run concurrency can be set in your run queue settings. See the{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        href=\"https://docs.dagster.io/guides/limiting-concurrency-in-data-pipelines#configuring-run-level-concurrency\"\n      >\n        run concurrency documentation\n      </a>{' '}\n      for more information.\n    </Box>\n  );\n\n  const settings_content = runQueueConfig ? (\n    <MetadataTableWIP>\n      <tbody>\n        <tr>\n          <td>Max concurrent runs:</td>\n          <td>{runQueueConfig.maxConcurrentRuns}</td>\n        </tr>\n        <tr>\n          <td>Tag concurrency limits:</td>\n          <td>\n            {runQueueConfig.tagConcurrencyLimitsYaml ? (\n              <StyledRawCodeMirror\n                value={runQueueConfig.tagConcurrencyLimitsYaml}\n                options={{readOnly: true, lineNumbers: true, mode: 'yaml'}}\n              />\n            ) : (\n              '-'\n            )}\n          </td>\n        </tr>\n      </tbody>\n    </MetadataTableWIP>\n  ) : null;\n\n  return (\n    <>\n      <RunConcurrencyLimitHeader onEdit={onEdit} refreshState={refreshState} />\n      {infoContent}\n      {settings_content}\n    </>\n  );\n};\n\nconst RunConcurrencyLimitHeader = ({\n  onEdit,\n  refreshState,\n}: {\n  onEdit?: () => void;\n  refreshState?: QueryRefreshState;\n}) => (\n  <Box\n    flex={{justifyContent: 'space-between', alignItems: 'center'}}\n    padding={{vertical: 16, horizontal: 24}}\n    border=\"bottom\"\n  >\n    <Subheading>Run concurrency</Subheading>\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n      {refreshState ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n      {onEdit ? (\n        <Button icon={<Icon name=\"edit\" />} onClick={() => onEdit()}>\n          Edit configuration\n        </Button>\n      ) : null}\n    </Box>\n  </Box>\n);\n\nexport const ConcurrencyLimits = ({\n  instanceConfig,\n  hasSupport,\n  concurrencyKeys,\n  refetch,\n  minValue,\n  maxValue,\n  selectedKey,\n  onSelectKey,\n}: {\n  concurrencyKeys: string[];\n  refetch: () => void;\n  instanceConfig?: string | null;\n  hasSupport?: boolean;\n  maxValue?: number;\n  minValue?: number;\n  selectedKey?: string | null;\n  onSelectKey: (key: string | undefined) => void;\n}) => {\n  const [action, setAction] = React.useState<DialogAction>();\n  const onConcurrencyStepsDialogClose = React.useCallback(() => {\n    onSelectKey(undefined);\n  }, [onSelectKey]);\n\n  const sortedKeys = React.useMemo(() => {\n    return [...concurrencyKeys].sort((a, b) => COMMON_COLLATOR.compare(a, b));\n  }, [concurrencyKeys]);\n\n  const onAdd = () => {\n    setAction({actionType: 'add'});\n  };\n  const onEdit = (concurrencyKey: string) => {\n    setAction({actionType: 'edit', concurrencyKey});\n  };\n  const onDelete = (concurrencyKey: string) => {\n    setAction({actionType: 'delete', concurrencyKey});\n  };\n\n  if (!hasSupport && instanceConfig && instanceConfig.includes('SqliteEventLogStorage')) {\n    return (\n      <>\n        <ConcurrencyLimitHeader />\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency support\"\n            description={\n              'This instance does not support global concurrency limits. You will need to ' +\n              'configure a different storage implementation (e.g. Postgres/MySQL) to use this ' +\n              'feature.'\n            }\n          />\n        </Box>\n      </>\n    );\n  } else if (hasSupport === false) {\n    return (\n      <>\n        <ConcurrencyLimitHeader />\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency support\"\n            description={\n              'This instance does not currently support global concurrency limits. You may need to ' +\n              'run `dagster instance migrate` to add the necessary tables to your dagster storage ' +\n              'to support this feature.'\n            }\n          />\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <ConcurrencyLimitHeader onAdd={onAdd} />\n      {concurrencyKeys.length === 0 ? (\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency limits\"\n            description={\n              <>\n                No concurrency limits have been configured for this instance.&nbsp;\n                <ButtonLink onClick={() => onAdd()}>Add a concurrency limit</ButtonLink>.\n              </>\n            }\n          />\n        </Box>\n      ) : (\n        <ConcurrencyTable\n          concurrencyKeys={sortedKeys}\n          onDelete={onDelete}\n          onEdit={onEdit}\n          onSelect={onSelectKey}\n        />\n      )}\n      <AddConcurrencyLimitDialog\n        open={action?.actionType === 'add'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        minValue={minValue ?? DEFAULT_MIN_VALUE}\n        maxValue={maxValue ?? DEFAULT_MAX_VALUE}\n      />\n      <DeleteConcurrencyLimitDialog\n        concurrencyKey={action && action.actionType === 'delete' ? action.concurrencyKey : ''}\n        open={action?.actionType === 'delete'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <EditConcurrencyLimitDialog\n        open={action?.actionType === 'edit'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        concurrencyKey={action?.actionType === 'edit' ? action.concurrencyKey : ''}\n        minValue={minValue ?? DEFAULT_MIN_VALUE}\n        maxValue={maxValue ?? DEFAULT_MAX_VALUE}\n      />\n      <ConcurrencyStepsDialog\n        title={\n          <span>\n            Concurrency steps for <strong>{selectedKey}</strong>\n          </span>\n        }\n        onClose={onConcurrencyStepsDialogClose}\n        concurrencyKey={selectedKey}\n        onUpdate={refetch}\n      />\n    </>\n  );\n};\n\nconst ConcurrencyLimitHeader = ({onAdd}: {onAdd?: () => void}) => (\n  <Box\n    flex={{justifyContent: 'space-between', alignItems: 'center'}}\n    padding={{vertical: 16, horizontal: 24}}\n    border=\"top-and-bottom\"\n  >\n    <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n      <Subheading>Global op/asset concurrency</Subheading>\n      <Tag>Experimental</Tag>\n    </Box>\n    {onAdd ? (\n      <Button icon={<Icon name=\"add_circle\" />} onClick={() => onAdd()}>\n        Add concurrency limit\n      </Button>\n    ) : null}\n  </Box>\n);\n\nconst isValidLimit = (\n  concurrencyLimit?: string,\n  minLimitValue: number = DEFAULT_MIN_VALUE,\n  maxLimitValue: number = DEFAULT_MAX_VALUE,\n) => {\n  if (!concurrencyLimit) {\n    return false;\n  }\n  const value = parseInt(concurrencyLimit);\n  if (isNaN(value)) {\n    return false;\n  }\n  if (String(value) !== concurrencyLimit.trim()) {\n    return false;\n  }\n  return value >= minLimitValue && value <= maxLimitValue;\n};\n\nconst AddConcurrencyLimitDialog = ({\n  open,\n  onClose,\n  onComplete,\n  maxValue,\n  minValue,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n  maxValue: number;\n  minValue: number;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n  const [keyInput, setKeyInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n    setKeyInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey: keyInput, limit: parseInt(limitInput.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={open} title=\"Add concurrency limit\" onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <TextInput\n            value={keyInput || ''}\n            onChange={(e) => setKeyInput(e.target.value)}\n            placeholder=\"Concurrency key\"\n          />\n        </Box>\n        <Box margin={{bottom: 4}}>\n          Concurrency limit ({minValue}-{maxValue}):\n        </Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder={`${minValue} - ${maxValue}`}\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          intent=\"primary\"\n          onClick={save}\n          disabled={\n            !isValidLimit(limitInput.trim(), minValue, maxValue) || !keyInput || isSubmitting\n          }\n        >\n          {isSubmitting ? 'Adding...' : 'Add limit'}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst EditConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n  minValue,\n  maxValue,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n  minValue: number;\n  maxValue: number;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: parseInt(limitInput!.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Edit <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <strong>{concurrencyKey}</strong>\n        </Box>\n        <Box margin={{bottom: 4}}>\n          Concurrency limit ({minValue}-{maxValue}):\n        </Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder={`${minValue} - ${maxValue}`}\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"primary\" disabled>\n            Updating...\n          </Button>\n        ) : (\n          <Button\n            intent=\"primary\"\n            onClick={save}\n            disabled={!isValidLimit(limitInput.trim(), minValue, maxValue)}\n          >\n            Update limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst DeleteConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const [deleteConcurrencyLimit] = useMutation<\n    DeleteConcurrencyLimitMutation,\n    DeleteConcurrencyLimitMutationVariables\n  >(DELETE_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await deleteConcurrencyLimit({variables: {concurrencyKey}});\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Delete <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        Delete concurrency limit&nbsp;<strong>{concurrencyKey}</strong>?\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"danger\" disabled>\n            Deleting...\n          </Button>\n        ) : (\n          <Button intent=\"danger\" onClick={save}>\n            Delete limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ConcurrencyActionMenu = ({\n  pendingStep,\n  onUpdate,\n}: {\n  pendingStep: ConcurrencyStepFragment;\n  onUpdate: () => void;\n}) => {\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem\n            key=\"free-concurrency-slots-step\"\n            icon=\"status\"\n            text=\"Free concurrency slot for step\"\n            onClick={async () => {\n              const resp = await freeSlots({\n                variables: {runId: pendingStep.runId, stepKey: pendingStep.stepKey},\n              });\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slot',\n                });\n              }\n            }}\n          />\n          <MenuItem\n            key=\"free-concurrency-slots-run\"\n            icon=\"status\"\n            text=\"Free all concurrency slots for run\"\n            onClick={async () => {\n              await showSharedToaster({message: 'Freeing concurrency slots...'});\n              const resp = await freeSlots({variables: {runId: pendingStep.runId}});\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slots',\n                });\n              }\n            }}\n          />\n        </Menu>\n      }\n      position=\"bottom-right\"\n    >\n      <Button rightIcon={<Icon name=\"expand_more\" />}>Actions</Button>\n    </Popover>\n  );\n};\n\nconst ConcurrencyStepsDialog = ({\n  concurrencyKey,\n  onClose,\n  title,\n  onUpdate,\n}: {\n  concurrencyKey?: string | null;\n  title: string | React.ReactNode;\n  onClose: () => void;\n  onUpdate: () => void;\n}) => {\n  const queryResult = useQuery<ConcurrencyKeyDetailsQuery, ConcurrencyKeyDetailsQueryVariables>(\n    CONCURRENCY_KEY_DETAILS_QUERY,\n    {\n      variables: {\n        concurrencyKey: concurrencyKey || '',\n      },\n      skip: !concurrencyKey,\n    },\n  );\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n  const refetch = React.useCallback(() => {\n    queryResult.refetch();\n    onUpdate();\n  }, [queryResult, onUpdate]);\n\n  return (\n    <Dialog\n      isOpen={!!concurrencyKey}\n      title={title}\n      onClose={onClose}\n      style={{\n        minWidth: '400px',\n        maxWidth: '1000px',\n        width: '90vw',\n        maxHeight: '90vh',\n      }}\n    >\n      <Box padding={{vertical: 16}} flex={{grow: 1}} style={{overflowY: 'auto'}}>\n        {!data ? (\n          <Box padding={{vertical: 64}}>\n            <Spinner purpose=\"section\" />\n          </Box>\n        ) : (\n          <PendingStepsTable keyInfo={data.instance.concurrencyLimit} refresh={refetch} />\n        )}\n      </Box>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst PendingStepsTable = ({\n  keyInfo,\n  refresh,\n}: {\n  keyInfo: ConcurrencyLimitFragment;\n  refresh: () => void;\n}) => {\n  const runIds = [...new Set(keyInfo.pendingSteps.map((step) => step.runId))];\n  const queryResult = useQuery<RunsForConcurrencyKeyQuery, RunsForConcurrencyKeyQueryVariables>(\n    RUNS_FOR_CONCURRENCY_KEY_QUERY,\n    {\n      variables: {\n        filter: {runIds},\n      },\n      skip: !keyInfo.pendingSteps.length,\n    },\n  );\n  const statusByRunId: {[id: string]: RunStatus} = {};\n  const runs =\n    queryResult.data?.pipelineRunsOrError.__typename === 'Runs'\n      ? queryResult.data.pipelineRunsOrError.results\n      : [];\n  runs.forEach((run) => {\n    statusByRunId[run.id] = run.status;\n  });\n\n  const steps = [...keyInfo.pendingSteps];\n  steps.sort((a, b) => {\n    if (a.priority && b.priority && a.priority !== b.priority) {\n      return a.priority - b.priority;\n    }\n    return a.enqueuedTimestamp - b.enqueuedTimestamp;\n  });\n  const assignedSteps = steps.filter((step) => !!step.assignedTimestamp);\n  const pendingSteps = steps.filter((step) => !step.assignedTimestamp);\n\n  const tableHeader = (\n    <thead>\n      <tr>\n        <th>Run ID</th>\n        <th>Step key</th>\n        <th>Assigned</th>\n        <th>Queued</th>\n        <th>\n          <Box flex={{alignItems: 'center', direction: 'row', gap: 4}}>\n            Priority\n            <Tooltip\n              placement=\"top\"\n              content=\"Priority can be set on each op/asset using the 'dagster/priority' tag. Higher priority steps will be assigned slots first.\"\n            >\n              <Icon name=\"info\" color={Colors.accentGray()} />\n            </Tooltip>\n          </Box>\n        </th>\n        <th></th>\n      </tr>\n    </thead>\n  );\n\n  if (!steps.length) {\n    return (\n      <Table>\n        {tableHeader}\n        <tbody>\n          <tr>\n            <td colSpan={6}>\n              <Box\n                flex={{alignItems: 'center', justifyContent: 'center'}}\n                style={{color: Colors.textLight()}}\n                padding={16}\n              >\n                There are no active or pending steps for this concurrency key.\n              </Box>\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n    );\n  }\n\n  return (\n    <Table>\n      {tableHeader}\n      <tbody style={{backgroundColor: Colors.backgroundYellow()}}>\n        {assignedSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n      <tbody>\n        {pendingSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst PendingStepRow = ({\n  step,\n  statusByRunId,\n  onUpdate,\n}: {\n  step: ConcurrencyStepFragment;\n  statusByRunId: {[id: string]: RunStatus};\n  onUpdate: () => void;\n}) => {\n  const runStatus = statusByRunId[step.runId];\n  return (\n    <tr>\n      <td>\n        {runStatus ? (\n          <Link to={`/runs/${step.runId}`}>\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <RunStatusDot status={runStatus} size={10} />\n              <Mono>{titleForRun({id: step.runId})}</Mono>\n              {failedStatuses.has(runStatus) ? (\n                <Tooltip\n                  placement=\"top\"\n                  content=\"Slots for canceled / failed runs can automatically be freed by configuring a run monitoring setting.\"\n                >\n                  <Icon name=\"info\" color={Colors.accentGray()} />\n                </Tooltip>\n              ) : null}\n            </Box>\n          </Link>\n        ) : (\n          <Mono>{titleForRun({id: step.runId})}</Mono>\n        )}\n      </td>\n      <td>\n        <Mono>{step.stepKey}</Mono>\n      </td>\n      <td>\n        {step.assignedTimestamp ? (\n          <TimeElapsed startUnix={step.assignedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>\n        {step.enqueuedTimestamp ? (\n          <TimeElapsed startUnix={step.enqueuedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>{step.priority}</td>\n      <td>\n        <ConcurrencyActionMenu pendingStep={step} onUpdate={onUpdate} />\n      </td>\n    </tr>\n  );\n};\n\nconst CONCURRENCY_STEP_FRAGMENT = gql`\n  fragment ConcurrencyStepFragment on PendingConcurrencyStep {\n    runId\n    stepKey\n    enqueuedTimestamp\n    assignedTimestamp\n    priority\n  }\n`;\nconst CONCURRENCY_LIMIT_FRAGMENT = gql`\n  fragment ConcurrencyLimitFragment on ConcurrencyKeyInfo {\n    concurrencyKey\n    slotCount\n    claimedSlots {\n      runId\n      stepKey\n    }\n    pendingSteps {\n      ...ConcurrencyStepFragment\n    }\n  }\n  ${CONCURRENCY_STEP_FRAGMENT}\n`;\nconst RUN_QUEUE_CONFIG_FRAGMENT = gql`\n  fragment RunQueueConfigFragment on RunQueueConfig {\n    maxConcurrentRuns\n    tagConcurrencyLimitsYaml\n  }\n`;\n\nexport const INSTANCE_CONCURRENCY_LIMITS_QUERY = gql`\n  query InstanceConcurrencyLimitsQuery {\n    instance {\n      id\n      info\n      supportsConcurrencyLimits\n      runQueuingSupported\n      runQueueConfig {\n        ...RunQueueConfigFragment\n      }\n      minConcurrencyLimitValue\n      maxConcurrencyLimitValue\n      concurrencyLimits {\n        concurrencyKey\n      }\n    }\n  }\n\n  ${RUN_QUEUE_CONFIG_FRAGMENT}\n`;\n\nconst SET_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation SetConcurrencyLimit($concurrencyKey: String!, $limit: Int!) {\n    setConcurrencyLimit(concurrencyKey: $concurrencyKey, limit: $limit)\n  }\n`;\n\nconst DELETE_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation DeleteConcurrencyLimit($concurrencyKey: String!) {\n    deleteConcurrencyLimit(concurrencyKey: $concurrencyKey)\n  }\n`;\n\nexport const FREE_CONCURRENCY_SLOTS_MUTATION = gql`\n  mutation FreeConcurrencySlots($runId: String!, $stepKey: String) {\n    freeConcurrencySlots(runId: $runId, stepKey: $stepKey)\n  }\n`;\n\nconst CONCURRENCY_KEY_DETAILS_QUERY = gql`\n  query ConcurrencyKeyDetailsQuery($concurrencyKey: String!) {\n    instance {\n      id\n      concurrencyLimit(concurrencyKey: $concurrencyKey) {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n`;\n\nconst RUNS_FOR_CONCURRENCY_KEY_QUERY = gql`\n  query RunsForConcurrencyKeyQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          status\n        }\n      }\n    }\n  }\n`;\n","import {Colors, Icon} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const InstanceWarningIcon = memo(() => {\n  const {daemons} = useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const WorkspaceStatus = memo(({placeholder}: {placeholder: boolean}) => {\n  const {codeLocations} = useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.accentGray()} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n"],"names":["TEMPLATE_COLUMNS","ConcurrencyTable","param","concurrencyKeys","onEdit","onDelete","onSelect","parentRef","useRef","rowVirtualizer","useVirtualizer","count","length","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","jsxs","Fragment","jsx","ConcurrencyHeader","div","style","overflow","Container","ref","Inner","$totalHeight","map","index","key","size","start","concurrencyKey","ConcurrencyRow","height","Box","border","display","gridTemplateColumns","fontSize","color","Colors","HeaderCell","useLazyQuery","SINGLE_CONCURRENCY_KEY_QUERY","variables","queryJob","queryResult","useDelayedRowQuery","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","limit","instance","concurrencyLimit","Row","$height","$start","RowGrid","RowCell","slotCount","LoadingOrNone","pendingSteps","filter","x","assignedTimestamp","flex","direction","gap","alignItems","span","Tag","intent","interactive","ButtonLink","onClick","ConcurrencyLimitActionMenu","Popover","content","Menu","MenuItem","icon","text","position","Button","Icon","name","gql","styled","InstanceConcurrencyPageContent","React","useTrackPageView","useDocumentTitle","useQueryPersistedState","queryKey","selectedKey","setSelectedKey","useQuery","INSTANCE_CONCURRENCY_LIMITS_QUERY","notifyOnNetworkStatusChange","refreshState","overflowY","margin","bottom","RunConcurrencyContent","hasRunQueue","runQueuingSupported","runQueueConfig","ConcurrencyLimits","instanceConfig","info","concurrencyLimits","hasSupport","supportsConcurrencyLimits","refetch","minValue","minConcurrencyLimitValue","maxValue","maxConcurrencyLimitValue","onSelectKey","padding","vertical","Spinner","purpose","InstanceConcurrencyPage","pageTitle","InstancePageContext","Page","PageHeader","title","Heading","tabs","InstanceTabs","tab","InstanceConcurrency","horizontal","justifyContent","Subheading","QueryRefreshCountdown","Mono","a","target","rel","href","infoContent","settings_content","MetadataTableWIP","tbody","tr","td","maxConcurrentRuns","tagConcurrencyLimitsYaml","StyledRawCodeMirror","value","options","readOnly","lineNumbers","mode","RunConcurrencyLimitHeader","action","setAction","onConcurrencyStepsDialogClose","undefined","sortedKeys","_to_consumable_array","_","sort","b","COMMON_COLLATOR","compare","onAdd","actionType","includes","ConcurrencyLimitHeader","NonIdealState","description","AddConcurrencyLimitDialog","open","onClose","onComplete","DeleteConcurrencyLimitDialog","EditConcurrencyLimitDialog","ConcurrencyStepsDialog","strong","onUpdate","isValidLimit","minLimitValue","maxLimitValue","parseInt","isNaN","String","trim","isSubmitting","setIsSubmitting","limitInput","setLimitInput","keyInput","setKeyInput","setConcurrencyLimit","useMutation","SET_CONCURRENCY_LIMIT_MUTATION","save","_async_to_generator","_state","sent","Dialog","isOpen","DialogBody","TextInput","onChange","e","placeholder","concat","DialogFooter","disabled","deleteConcurrencyLimit","DELETE_CONCURRENCY_LIMIT_MUTATION","ConcurrencyActionMenu","pendingStep","freeSlots","FREE_CONCURRENCY_SLOTS_MUTATION","resp","runId","stepKey","freeConcurrencySlots","showSharedToaster","message","rightIcon","CONCURRENCY_KEY_DETAILS_QUERY","skip","minWidth","maxWidth","width","maxHeight","grow","PendingStepsTable","keyInfo","refresh","runIds","Set","step","RUNS_FOR_CONCURRENCY_KEY_QUERY","statusByRunId","runs","pipelineRunsOrError","__typename","results","forEach","run","id","status","steps","priority","enqueuedTimestamp","assignedSteps","tableHeader","thead","th","Tooltip","placement","Table","backgroundColor","PendingStepRow","colSpan","runStatus","Link","to","RunStatusDot","titleForRun","failedStatuses","has","TimeElapsed","startUnix","endUnix","CONCURRENCY_STEP_FRAGMENT","CONCURRENCY_LIMIT_FRAGMENT","RUN_QUEUE_CONFIG_FRAGMENT","InstanceWarningIcon","memo","daemons","useContext","DeploymentStatusContext","WarningTooltip","modifiers","offset","enabled","WorkspaceStatus","codeLocations","type","fillColor","props","healthTitle","canSeeConfig","useCanSeeConfig","Tabs","selectedTabId","TabLink"],"sourceRoot":""}